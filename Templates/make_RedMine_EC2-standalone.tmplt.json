{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRole" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "AttachSshKey": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "KeyPairName" }, "" ] }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AppVolumeDevice" }, "" ] }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "UseCfnAppInstaller": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "RedmineAppinstallScript" }, "" ] }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CfnEndpointUrl" }, "" ] } ]
    },
    "UseEnvironment": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerEnvironment" }, "" ] }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerConfig" }, "" ] }
      ]
    }
  },
  "Description": "This template deploys a STIG-hardened Enterprise Linux 7 instance to host the RedMine service's web-tier.",
  "Mappings": {
    "Distro2RootDevice": {
      "AmazonLinux": {
        "DeviceName": "xvda"
      },
      "CentOS": {
        "DeviceName": "sda1"
      },
      "RedHat": {
        "DeviceName": "sda1"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {}
  },
  "Outputs": {
    "RedMineInstanceId": {
      "Description": "Instance ID",
      "Value": { "Ref": "RedMineHost" }
    }
  },
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$|^s3://.*$",
      "Description": "URL the file containing the admin group's SSH public keys.",
      "Type": "String"
    },
    "AmiDistro": {
      "AllowedValues": [
        "CentOS",
        "RedHat"
      ],
      "Default": "CentOS",
      "Description": "Linux distro of the AMI",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "",
        "/dev/xvdf",
        "/dev/xvdg",
        "/dev/xvdh",
        "/dev/xvdi",
        "/dev/xvdj"
      ],
      "Default": "",
      "Description": "(Optional) Device to mount an extra EBS volume. Leave blank to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/opt/data",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "1",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "1",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "https://cloudformation.us-east-1.amazonaws.com",
      "Description": "(Optional) URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "CfnResourceBucket": {
      "Description": "Name of authenticated-bucket(s) hosting provisioning resource-files.",
      "Type": "String"
    },
    "DbAdminName": {
      "Description": "Name of the RedMine master database-user.",
      "Type": "String"
    },
    "DbAdminPass": {
      "Description": "Password of the RedMine master database-user.",
      "Type": "String"
    },
    "DbFqdn": {
      "Description": "Fully-qualified domainname of the RedMine database host.",
      "Type": "String"
    },
    "DbInstanceName": {
      "Description": "Instance-name of the RedMine database.",
      "Type": "String"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for RedMine's hostname and DNS record",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Description": "Node-name for RedMine's hostname and DNS record",
      "Type": "String"
    },
    "InstanceRole": {
      "Default": "",
      "Description": "(Optional) IAM instance role to apply to the instance",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge"
      ],
      "Default": "t2.large",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, Watchmaker _always_ installs updates)",
      "Type": "String"
    },
    "PipIndexFips": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "PrivateIp": {
      "Default": "",
      "Description": "(Optional) Set a static, primary private IP. Leave blank to auto-select a free IP",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "confbuilder",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "RedMineBinaryVersion": {
      "Description": "RedMine version to be installed.",
      "Type": "String"
    },
    "RedMineOsPrepUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that prepares the EC2 instance for a RedMine install.",
      "Type": "String"
    },
    "RedMineProxyFqdn": {
      "Description": "Fully-qualified domainname of the RedMine reverse-proxy host.",
      "Type": "String"
    },
    "RedMineSharePath": {
      "Default": "",
      "Description": "Share-path of shared RedMine content.",
      "Type": "String"
    },
    "RedMineShareType": {
      "AllowedValues": [
        "glusterfs",
        "nfs"
      ],
      "Description": "Type of network share hosting shared RedMine content.",
      "Type": "String"
    },
    "RedmineAppinstallScript": {
      "Description": "URL of the script that installs/configures RedMine",
      "Type": "String",
      "AllowedPattern": "^http://.*\\.sh$|^https://.*\\.sh$|^s3://.*\\.sh$"
    },
    "RedmineHelperLocation": {
      "Description": "URL-root of location hosting ancilllary install files.",
      "Type": "String",
      "AllowedPattern": "^http://.*$|^https://.*$|^s3://.*$"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetId": {
      "Description": "ID of the subnet to assign to the instance",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "",
      "Description": "(Optional) URL to a Watchmaker config file",
      "Type": "String"
    },
    "WatchmakerEnvironment": {
      "AllowedValues": [
        "",
        "dev",
        "test",
        "prod"
      ],
      "Default": "",
      "Description": "Environment in which the instance is being deployed",
      "Type": "String"
    }
  },
  "Resources": {
    "RedMineHost": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Authentication": {
          "Ec2IamRole": {
            "buckets": [
              { "Ref": "CfnResourceBucket" }
            ],
            "roleName": { "Ref": "InstanceRole" },
            "type": "S3"
          }
        },
        "AWS::CloudFormation::Init": {
          "admkey-install": {
            "files": {
              "/tmp/adminkeys.pub": {
                "source": { "Ref": "AdminPubkeyURL" },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/tmp/admkey.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /tmp/adminkeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "1-admkey-install": {
                "command": "bash -xe /tmp/admkey.sh"
              }
            }
          },
          "configSets": {
            "launch": [
              "setup",
              "admkey-install",
              "watchmaker-install",
              "watchmaker-launch",
              "os-prep",
              {
                "Fn::If": [
                  "UseCfnAppInstaller",
                  [
                    "app-install",
                    "ready-rc_local"
                  ],
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ]
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource RedMineHost",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          },
          "install-updates": {
            "commands": {
              "10-install-updates": {
                "command": "yum -y update"
              }
            }
          },
          "reboot": {
            "commands": {
              "10-reboot": {
                "command": "shutdown -r +1 &"
              }
            }
          },
          "setup": {
            "files": {
              "/etc/cfn/RedMine.envs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                       "RM_DB_ADMIN_NAME=",
                       { "Ref": "DbAdminName"},
                       "\n",
                       "RM_DB_ADMIN_PASS=",
                       { "Ref": "DbAdminPass" },
                       "\n",
                       "RM_DB_INSTANCE_NAME=",
                       { "Ref": "DbInstanceName" },
                       "\n",
                       "RM_DB_FQDN=",
                       { "Ref": "DbFqdn" },
                       "\n",
                       "RM_OS_PREP_SCRIPT=",
                       { "Ref": "RedMineOsPrepUrl" },
                       "\n",
                       "RM_APP_PREP_SCRIPT=",
                       { "Ref": "RedmineAppinstallScript" },
                       "\n",
                       "RM_BIN_VERS=",
                       { "Ref": "RedMineBinaryVersion" },
                       "\n",
                       "RM_PROXY_FQDN=",
                       { "Ref": "RedMineProxyFqdn" },
                       "\n",
                       "RM_PERSISTENT_SHARE_PATH=",
                       { "Ref": "RedMineSharePath" },
                       "\n",
                       "RM_PERSISTENT_SHARE_TYPE=",
                       { "Ref": "RedMineShareType" },
                       "\n",
                       "RM_HELPER_ROOT_URL=",
                       { "Ref": "RedmineHelperLocation" },
                       "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.RedMineHost.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource RedMineHost",
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PipIndexFips" },
                      "\n",
                      "pip install --index-url=\"$PYPI_URL\" wheel==0.29.0\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade pip setuptools boto3 watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/tmp/adminkeys.pub": {
                "group": "root",
                "mode": "000600",
                "owner": "root",
                "source": { "Ref": "AdminPubkeyURL" }
              },
              "/tmp/admkey.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /tmp/adminkeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "app-install": {
            "commands": {
              "1-get-app-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl -skL ",
                      { "Ref": "RedmineAppinstallScript" },
                      " -o redmine-appinstall.sh"
                    ]
                  ]
                }
              },
              "2-run-prep-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": "bash -xe redmine-appinstall.sh"
              }
            },
            "files": {
              "/etc/cfn/scripts/main_cf.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/main_cf.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/configuration_yml.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/configuration_yml.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/files/database.yml": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "production:\n",
                      "  adapter: mysql2\n",
                      "  database: ",
                         { "Ref": "DbInstanceName" },
                         "\n",
                      "  host: localhost \n",
                      "  # database user\n",
                      "  username: ",
                         { "Ref": "DbAdminName" },
                         "\n",
                      "  # password for user above\n",
                      "  password: ",
                         { "Ref": "DbAdminPass" } ,
                         "\n",
                      "  encoding: utf8\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/etc/postfix/sasl_passwd": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/sasl_passwd"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000640",
                "owner": "root"
              }
            }
          },
          "os-prep": {
            "commands": {
              "1-get-prep-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl -skL ",
                      { "Ref": "RedMineOsPrepUrl" },
                      " -o redmine-osprep.sh"
                    ]
                  ]
                }
              },
              "2-run-prep-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": "bash -xe redmine-osprep.sh"
              }
            }
          },
          "ready-rc_local": {
            "commands": {
              "1-enable-ruby": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'source /etc/profile.d/enable_rh-ruby24.sh' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "2-add-gem-call": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'bash -xe ",
                      "/etc/cfn/scripts/GemStuff.sh 2>&1 | ",
                      "tee -a /var/log/rc_local.log' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "3-add-passenger-call": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'bash -xe ",
                      "/etc/cfn/scripts/Passenger_conf.sh 2>&1 | ",
                      "tee -a /var/log/rc_local.log' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "4-git-remote-call": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'bash -xe ",
                      "/etc/cfn/scripts/git_remote.sh 2>&1 | ",
                      "tee -a /var/log/rc_local.log' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "5-rm-plugins-call": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'bash -xe ",
                      "/etc/cfn/scripts/plugins.sh 2>&1 | ",
                      "tee -a /var/log/rc_local.log' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "7-add-perm-change": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'chmod a-x /etc/rc.d/rc.local' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "8-add-completion_message": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'logger -t rc-local -p kern.notice -s \"NOTICE: Post-reboot actions completed.\"' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "10-set_perm": {
                "command": "chmod a+x /etc/rc.d/rc.local"
              }
            },
            "files": {
              "/etc/cfn/scripts/GemStuff.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/GemStuff.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/Passenger_conf.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/Passenger_conf.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/git_remote.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/git_remote.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/plugins.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/plugins.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
              }
            }
          },
          "watchmaker-launch": {
            "commands": {
              "10-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          },
          "watchmaker-update": {
            "commands": {
              "10-watchmaker-update": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --salt-states None",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": { "Ref": "AppVolumeDevice" },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRole" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyPairName": {
          "Fn::If": [
            "AttachSshKey",
            { "Ref": "KeyPairName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                "true",
                "false"
              ]
            },
            "DeviceIndex": "0",
            "GroupSet": { "Ref": "SecurityGroupIds" },
            "SubnetId": { "Ref": "SubnetId" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                { "Ref": "ProvisionUser" },
                "\n",
                "\n",
                "hostname: ",
                { "Ref": "Hostname" },
                "\n",
                "fqdn: ",
                { "Ref": "Hostname" },
                ".",
                { "Ref": "Domainname" },
                "\n",
                "\n",
                {
                  "Fn::If": [
                    "CreateAppVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "bootcmd:\n",
                          "  - cloud-init-per instance mkfs-bkupvolume mkfs -t ext4 ",
                          { "Ref": "AppVolumeDevice" },
                          "\n",
                          "\n",
                          "mounts:\n",
                          "  - [ ",
                          "\"",
                          { "Ref": "AppVolumeDevice" },
                          "\", ",
                          "\"",
                          { "Ref": "AppVolumeMountPath" },
                          "\", ",
                          "\"auto\" ",
                          "]\n"
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "\n",
                "runcmd:\n",
                "  - |\n",
                "    # Export cert bundle ENVs\n",
                "    export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "    export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n\n",
                "    \n",
                "    # Define our error-handler\n",
                "    function err_exit {\n",
                "     echo \"${1}\"\n",
                "     logger -p kern.crit -t UserData \"${1}\"\n",
                "     /opt/aws/bin/cfn-signal -e 1 --stack ",
                { "Ref": "AWS::StackName" },
                " --resource RedMineHost\n",
                "     exit 1\n",
                "    }\n",
                "    # Install RPMs needed by the cfn-tools.\n",
                "    yum --enablerepo=",
                { "Ref": "EpelRepo" },
                " install -y ",
                { "Ref": "PyStache" },
                " ",
                { "Ref": "PipRpm" },
                " || err_exit 'Could not install Cfn dependencies.'\n",
                "    \n",
                "    # Upgrade pip and setuptools\n",
                "    PYPI_URL=",
                { "Ref": "PipIndexFips" },
                "\n",
                "    pip install --index-url=\"$PYPI_URL\"",
                " --upgrade pip setuptools\n\n",
                "    # Update cfn-bootstrapper hash method\n",
                "    printf 'Updating CFn hash-check method... '\n",
                "    PYVERS=$(python -c 'import sys;",
                " version=sys.version_info[:2];",
                " print(\"{0}.{1}\".format(*version))')\n",
                "    sed -i '/^[ \\t][ \\t]*self._etag/s/etag$/None/'",
                " /usr/lib/python${PYVERS}/site-packages/cfnbootstrap",
                "/util.py && echo 'Success' || ",
                "err_exit 'Failed updating CFn hash-method'\n",
                "    \n",
                "    # Initialize the CFn subsystems\n",
                "    /opt/aws/bin/cfn-init -v -c launch",
                " --stack ",
                { "Ref": "AWS::StackName" },
                " --resource RedMineHost",
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                " --region ",
                { "Ref": "AWS::Region" },
                " ||",
                " ( echo 'ERROR: cfn-init failed! Aborting!';",
                " /opt/aws/bin/cfn-signal -e 1",
                "  --stack ",
                { "Ref": "AWS::StackName" },
                "  --resource RedMineHost",
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "  --region ",
                { "Ref": "AWS::Region" },
                ";",
                " exit 1",
                " )\n\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
