{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AssignInstanceRole": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "InstanceRole" }, "" ] }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoPublicIp" }, "true" ] }
      ]
    },
    "AttachSshKey": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "KeyPairName" }, "" ] }
      ]
    },
    "CreateAppVolume": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "AppVolumeDevice" }, "" ] }
      ]
    },
    "InstallUpdates": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoUpdates" }, "true" ] }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "NoReboot" }, "true" ] }
      ]
    },
    "UseCfnAppInstaller": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "RedmineAppinstallScript" }, "" ] }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "CfnEndpointUrl" }, "" ] }
      ]
    },
    "UseEnvironment": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerEnvironment" }, "" ] }
      ]
    },
    "UseS3Source": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerS3Source" }, "false" ] }
      ]
    },
    "UseWamConfig": {
      "Fn::Not": [
        { "Fn::Equals": [ { "Ref": "WatchmakerConfig" }, "" ] }
      ]
    }
  },
  "Description": "This template creates an Autoscaling Group and Launch Configuration to deploy STIG-hardened Enterprise Linux 7 instances to host the RedMine service's web-tier.",
  "Mappings": {},
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Generic EC2 Parms"
          },
          "Parameters": [
            "InstanceType",
            "DesiredCapacity",
            "MaxCapacity",
            "MinCapacity",
            "AmiId",
            "Hostname",
            "Domainname",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "InstanceRole",
            "SecurityGroupIds",
            "SubnetIds",
            "AppVolumeDevice",
            "AppVolumeMountPath",
            "AppVolumeSize",
            "AppVolumeType",
            "NoPublicIp",
            "ToggleNewInstances",
            "CfnEndpointUrl"
          ]
        },
        {
          "Label": {
            "default": "Hardening Tools"
          },
          "Parameters": [
            "WatchmakerConfig",
            "WatchmakerEnvironment",
            "WatchmakerS3Source",
            "NoReboot",
            "NoUpdates",
            "ToggleCfnInitUpdate",
            "EpelRepo",
            "PipRpm",
            "PyStache",
            "PypiIndexUrl",
            "CfnGetPipUrl",
            "CfnBootstrapUtilsUrl"
          ]
        },
        {
          "Label": {
            "default": "RedMine Configuration"
          },
          "Parameters": [
            "RedmineBinaryVersion",
            "RedmineOsPrepUrl",
            "RedmineAppinstallScript",
            "RedmineHelperLocation",
            "RedmineSharePath",
            "RedmineShareType",
            "RedmineProxyFqdn",
            "DbFqdn",
            "DbInstanceName",
            "DbAdminName",
            "DbAdminPass"
          ]
        }
      ]
    }
  },
  "Outputs": {},
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$|^s3://.*$",
      "Description": "URL the file containing the admin group's SSH public keys.",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "AppVolumeDevice": {
      "AllowedValues": [
        "",
        "/dev/xvdf",
        "/dev/xvdg",
        "/dev/xvdh",
        "/dev/xvdi",
        "/dev/xvdj"
      ],
      "Default": "",
      "Description": "(Optional) Device to mount an extra EBS volume. Leave blank to launch without an extra application volume",
      "Type": "String"
    },
    "AppVolumeMountPath": {
      "AllowedPattern": "/.*",
      "Default": "/opt/data",
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "AppVolumeSize": {
      "ConstraintDescription": "Must be between 1GB and 16384GB.",
      "Default": "1",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "1",
      "Type": "Number"
    },
    "AppVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String"
    },
    "CfnBootstrapUtilsUrl": {
      "AllowedPattern": "^http[s]?://.*\\.tar\\.gz$|^$",
      "Default": "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
      "Description": "(Optional - if AMI contains cfn-bootstrap) URL to aws-cfn-bootstrap-latest.tar.gz",
      "Type": "String"
    },
    "CfnEndpointUrl": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "https://cloudformation.us-east-1.amazonaws.com", 
      "Description": "(Optional) URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String"
    },
    "CfnGetPipUrl": {
      "AllowedPattern": "^http[s]?://.*\\.py$|^$",
      "Default": "https://bootstrap.pypa.io/get-pip.py",
      "Description": "(Optional - if AMI contains cfn-bootstrap) URL to get-pip.py",
      "Type": "String"
    },
    "DbAdminName": {
      "Description": "Name of the RedMine master database-user.",
      "Type": "String"
    },
    "DbAdminPass": {
      "Description": "Password of the RedMine master database-user.",
      "NoEcho": "True",
      "Type": "String"
    },
    "DbFqdn": {
      "Description": "Fully-qualified domainname of the RedMine database host.",
      "Type": "String"
    },
    "DbInstanceName": {
      "Description": "Instance-name of the RedMine database.",
      "Type": "String"
    },
    "DesiredCapacity": {
      "Default": "1",
      "Description": "Desired number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for RedMine's hostname and DNS record",
      "Type": "String"
    },
    "ElbArn": {
      "Description": "Elastic Load-Balancer to associate EC2 resources to.",
      "Type": "String"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Description": "Node-name for RedMine's hostname and DNS record",
      "Type": "String"
    },
    "InstanceRole": {
      "Default": "",
      "Description": "(Optional) IAM instance role to apply to the instance(s)",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge"
      ],
      "Default": "t2.micro",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "KeyPairName": {
      "Default": "",
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "String"
    },
    "MaxCapacity": {
      "Default": "2",
      "Description": "Maximum number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "MinCapacity": {
      "Default": "1",
      "Description": "Minimum number of instances in the Autoscaling Group",
      "Type": "Number"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, Watchmaker _always_ installs updates)",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "confbuilder",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "PypiIndexUrl": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "RedmineAppinstallScript": {
      "Description": "URL of the script that installs/configures RedMine",
      "Type": "String",
      "AllowedPattern": "^http://.*\\.sh$|^https://.*\\.sh$|^s3://.*\\.sh$"
    },
    "RedmineBinaryVersion": {
      "Description": "RedMine version to be installed.",
      "Type": "String"
    },
    "RedmineHelperLocation": {
      "Description": "URL-root of location hosting ancilllary install files.",
      "Type": "String",
      "AllowedPattern": "^http://.*$|^https://.*$|^s3://.*$"
    },
    "RedmineOsPrepUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that prepares the EC2 instance for a RedMine install.",
      "Type": "String"
    }, 
    "RedmineProxyFqdn": {
      "Description": "Fully-qualified domainname of the RedMine reverse-proxy host.",
      "Type": "String"
    },
    "RedmineSharePath": {
      "Default": "",
      "Description": "Share-path of shared RedMine content.",
      "Type": "String"
    },
    "RedmineShareType": {
      "AllowedValues": [
        "glusterfs",
        "nfs"
      ],
      "Description": "Type of network share hosting shared RedMine content.",
      "Type": "String"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance(s)",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "SubnetIds": {
      "Description": "List of subnets to associate to the Autoscaling Group",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "ToggleCfnInitUpdate": {
      "AllowedValues": [
        "A",
        "B"
      ],
      "Default": "A",
      "Description": "A/B toggle that forces a change to instance metadata, triggering the cfn-init update sequence",
      "Type": "String"
    },
    "ToggleNewInstances": {
      "AllowedValues": [
        "A",
        "B"
      ],
      "Default": "A",
      "Description": "A/B toggle that forces a change to instance userdata, triggering new instances via the Autoscale update policy",
      "Type": "String"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "",
      "Description": "(Optional) URL to a Watchmaker config file",
      "Type": "String"
    },
    "WatchmakerEnvironment": {
      "AllowedValues": [
        "",
        "dev",
        "test",
        "prod"
      ],
      "Default": "",
      "Description": "Environment in which the instance is being deployed",
      "Type": "String"
    },
    "WatchmakerS3Source": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Flag that tells watchmaker to use its instance role to retrieve watchmaker content from S3",
      "Type": "String"
    }
  },
  "Resources": {
    "RedMineASG": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": { "Ref": "DesiredCapacity" },
          "Timeout": "PT15M"
        }
      },
      "Properties": {
        "DesiredCapacity": { "Ref": "DesiredCapacity" },
        "LaunchConfigurationName": { "Ref": "RedMineLC" },
        "TargetGroupARNs": [ { "Ref" : "ElbArn" } ],
        "MaxSize": { "Ref": "MaxCapacity" },
        "MinSize": { "Ref": "MinCapacity" },
        "Tags": [
          {
            "Key": "Purpose",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "RedMine Autoscaling Group (",
                  { "Ref": "AWS::StackName" },
                  ")"
                ]
              ]
            }
          },
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" }
                ]
              ]
            }
          }
        ],
        "VPCZoneIdentifier": { "Ref": "SubnetIds" }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "2",
          "MinInstancesInService": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "RedMineLC": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "admkey-install": {
            "files": {
              "/etc/cfn/scripts/admkey.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PROVHOME=$(getent passwd ",
                      { "Ref": "ProvisionUser" },
                      " | awk -F\":\" '{print $6}')\n",
                      "\n",
                      "install -b -m 000600 -o ",
                      { "Ref": "ProvisionUser" },
                      " -g ",
                      { "Ref": "ProvisionUser" },
                      " /etc/cfn/files/adminkeys.pub ${PROVHOME}/.ssh/authorized_keys\n",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            },
            "commands": {
              "1-admkey-install": {
                "command": "bash -xe /etc/cfn/scripts/admkey.sh"
              }
            }
          },
          "app-install": {
            "commands": {
              "1-get-app-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl -skL ",
                      { "Ref": "RedmineAppinstallScript" },
                      " -o redmine-appinstall.sh"
                    ]
                  ]
                }
              },
              "2-run-prep-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": "bash -xe redmine-appinstall.sh"
              }
            },
            "files": {
              "/etc/cfn/scripts/main_cf.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/main_cf.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/configuration_yml.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/configuration_yml.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/files/database.yml": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "production:\n",
                      "  adapter: mysql2\n",
                      "  database: ",
                         { "Ref": "DbInstanceName" },
                         "\n",
                      "  host: localhost \n",
                      "  # database user\n",
                      "  username: ",
                         { "Ref": "DbAdminName" },
                         "\n",
                      "  # password for user above\n",
                      "  password: ",
                         { "Ref": "DbAdminPass" } ,
                         "\n",
                      "  encoding: utf8\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/etc/postfix/sasl_passwd": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/sasl_passwd"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000640",
                "owner": "root"
              }
            }
          },
          "configSets": {
            "launch": [
              "setup",
              "admkey-install",
              "watchmaker-install",
              "watchmaker-launch",
              {
                "Fn::If": [
                  "UseCfnAppInstaller",
                  [
                    "os-prep",
                    "app-install",
                    "ready-rc_local"
                  ],
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ],
            "update": [
              "setup",
              "admkey-install",
              {
                "Fn::If": [
                  "InstallUpdates",
                  "install-updates",
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "watchmaker-install",
              "watchmaker-update",
              {
                "Fn::If": [
                  "UseCfnAppInstaller",
                  [
                    "os-prep",
                    "app-install",
                    "ready-rc_local"
                  ],
                  { "Ref": "AWS::NoValue" }
                ]
              },
              "finalize",
              {
                "Fn::If": [
                  "Reboot",
                  "reboot",
                  { "Ref": "AWS::NoValue" }
                ]
              }
            ]
          },
          "finalize": {
            "commands": {
              "10-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/opt/aws/bin/cfn-signal -e 0",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource RedMineASG",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRole" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          },
          "install-updates": {
            "commands": {
              "10-install-updates": {
                "command": "yum -y update"
              }
            }
          },
          "os-prep": {
            "commands": {
              "1-get-prep-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl -skL ",
                      { "Ref": "RedmineOsPrepUrl" },
                      " -o redmine-osprep.sh"
                    ]
                  ]
                }
              },
              "2-run-prep-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": "bash -xe redmine-osprep.sh"
              }
            }
          },
          "ready-rc_local": {
            "commands": {
              "1-enable-ruby": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'source /etc/profile.d/enable_rh-ruby24.sh' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "2-add-gem-call": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'bash -xe ",
                      "/etc/cfn/scripts/GemStuff.sh 2>&1 | ",
                      "tee -a /var/log/rc_local.log' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "3-add-passenger-call": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'bash -xe ",
                      "/etc/cfn/scripts/Passenger_conf.sh 2>&1 | ",
                      "tee -a /var/log/rc_local.log' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "4-git-remote-call": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'bash -xe ",
                      "/etc/cfn/scripts/git_remote.sh 2>&1 | ",
                      "tee -a /var/log/rc_local.log' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "5-rm-plugins-call": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'bash -xe ",
                      "/etc/cfn/scripts/plugins.sh 2>&1 | ",
                      "tee -a /var/log/rc_local.log' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "7-add-perm-change": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'chmod a-x /etc/rc.d/rc.local' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "8-add-completion_message": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'logger -t rc-local -p kern.notice -s \"NOTICE: Post-reboot actions completed.\"' >> ",
                      "/etc/rc.d/rc.local\n"
                    ]
                  ]
                }
              },
              "10-set_perm": {
                "command": "chmod a+x /etc/rc.d/rc.local"
              }
            },
            "files": {
              "/etc/cfn/scripts/GemStuff.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/GemStuff.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/Passenger_conf.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/Passenger_conf.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/git_remote.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/git_remote.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/plugins.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/plugins.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "reboot": {
            "commands": {
              "10-reboot": {
                "command": "shutdown -r +1 &"
              }
            }
          },
          "setup": {
            "commands": {
              "1-fetch-os_prep-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl -skL ",
                      { "Ref": "RedmineOsPrepUrl" },
                      " -o redmine-osprep.sh"
                    ]
                  ]
                }
              },
              "2-fetch-app-pre_reboot-script": {
                "cwd": "/etc/cfn/scripts/",
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl -skL ",
                      { "Ref": "RedmineAppinstallScript" },
                      " -o redmine-appinstall.sh"
                    ]
                  ]
                }
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "role=",
                                { "Ref": "InstanceRole" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "url=",
                                { "Ref": "CfnEndpointUrl" },
                                "\n"
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      "interval=1",
                      "\n",
                      "verbose=true",
                      "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.RedMineLC.Metadata\n",
                      "action=/opt/aws/bin/cfn-init -v -c update",
                      " --stack ",
                      { "Ref": "AWS::StackName" },
                      " --resource RedMineLC",
                      {
                        "Fn::If": [
                          "AssignInstanceRole",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --role ",
                                { "Ref": "InstanceRole" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseCfnUrl",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --url ",
                                { "Ref": "CfnEndpointUrl" }
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/RedMine.envs": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "RM_DB_ADMIN_NAME=",
                       { "Ref": "DbAdminName"},
                       "\n",
                      "RM_DB_ADMIN_PASS=",
                       { "Ref": "DbAdminPass" },
                       "\n",
                      "RM_DB_INSTANCE_NAME=",
                       { "Ref": "DbInstanceName" },
                       "\n",
                      "RM_DB_FQDN=",
                       { "Ref": "DbFqdn" },
                       "\n",
                      "RM_OS_PREP_SCRIPT=",
                       { "Ref": "RedmineOsPrepUrl" },
                       "\n",
                      "RM_APP_PREP_SCRIPT=",
                       { "Ref": "RedmineAppinstallScript" },
                       "\n",
                      "RM_BIN_VERS=",
                       { "Ref": "RedmineBinaryVersion" },
                       "\n",
                      "RM_PROXY_FQDN=",
                       { "Ref": "RedmineProxyFqdn" },
                       "\n",
                      "RM_PERSISTENT_SHARE_PATH=",
                       { "Ref": "RedmineSharePath" },
                       "\n",
                      "RM_PERSISTENT_SHARE_TYPE=",
                       { "Ref": "RedmineShareType" },
                       "\n",
                      "RM_HELPER_ROOT_URL=",
                       { "Ref": "RedmineHelperLocation" },
                       "\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000400",
                "owner": "root"
              },
              "/etc/cfn/scripts/main_cf.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/main_cf.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/configuration_yml.sh": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/configuration_yml.sh"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/scripts/watchmaker-install.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "PYPI_URL=",
                      { "Ref": "PypiIndexUrl" },
                      "\n",
                      "pip install --index-url=\"$PYPI_URL\" wheel==0.29.0\n",
                      "pip install",
                      " --index-url=\"$PYPI_URL\"",
                      " --upgrade pip setuptools boto3 watchmaker\n\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/etc/cfn/files/adminkeys.pub": {
                "source": { "Ref": "AdminPubkeyURL" },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/etc/cfn/files/database.yml": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "production:\n",
                      "  adapter: mysql2\n",
                      "  database: ",
                         { "Ref": "DbInstanceName" },
                         "\n",
                      "  host: localhost \n",
                      "  # database user\n",
                      "  username: ",
                         { "Ref": "DbAdminName" },
                         "\n",
                      "  # password for user above\n",
                      "  password: ",
                         { "Ref": "DbAdminPass" } ,
                         "\n",
                      "  encoding: utf8\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000600",
                "owner": "root"
              },
              "/etc/cfn/files/sasl_passwd": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "RedmineHelperLocation" },
                      "/sasl_passwd"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000640",
                "owner": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "watchmaker-install": {
            "commands": {
              "10-watchmaker-install": {
                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh",
                "env": {
                  "AWS_CA_BUNDLE": "/etc/pki/tls/certs/ca-bundle.crt",
                  "AWS_DEFAULT_REGION": { "Ref": "AWS::Region" },
                  "REQUESTS_CA_BUNDLE": "/etc/pki/tls/certs/ca-bundle.crt"
                }
              }
            }
          },
          "watchmaker-launch": {
            "commands": {
              "10-watchmaker-launch": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseS3Source",
                          " --s3-source",
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          },
          "watchmaker-update": {
            "commands": {
              "10-watchmaker-update": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "watchmaker --log-level debug",
                      " --log-dir /var/log/watchmaker",
                      " --salt-states None",
                      " --no-reboot",
                      {
                        "Fn::If": [
                          "UseWamConfig",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --config \"",
                                { "Ref": "WatchmakerConfig" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseEnvironment",
                          {
                            "Fn::Join": [
                              "",
                              [
                                " --env \"",
                                { "Ref": "WatchmakerEnvironment" },
                                "\""
                              ]
                            ]
                          },
                          ""
                        ]
                      },
                      {
                        "Fn::If": [
                          "UseS3Source",
                          " --s3-source",
                          ""
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          }
        },
        "ToggleCfnInitUpdate": { "Ref": "ToggleCfnInitUpdate" }
      },
      "Properties": {
        "AssociatePublicIpAddress": {
          "Fn::If": [
            "AssignPublicIp",
            "true",
            "false"
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeType": "gp2"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": { "Ref": "AppVolumeDevice" },
                "Ebs": {
                  "DeleteOnTermination": "true",
                  "VolumeSize": { "Ref": "AppVolumeSize" },
                  "VolumeType": { "Ref": "AppVolumeType" }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            { "Ref": "InstanceRole" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ImageId": { "Ref": "AmiId" },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": {
          "Fn::If": [
            "AttachSshKey",
            { "Ref": "KeyPairName" },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "SecurityGroups": { "Ref": "SecurityGroupIds" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"===============3585321300151562773==\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"cloud.cfg\"\n",
                "\n",
                "#cloud-config\n",
                "\n",
                "system_info:\n",
                "  default_user:\n",
                "    name: ",
                { "Ref": "ProvisionUser" },
                "\n",
                "\n",
                "hostname: ",
                { "Ref": "Hostname" },
                "\n",
                "fqdn: ",
                { "Ref": "Hostname" },
                ".",
                { "Ref": "Domainname" },
                "\n",
                "\n",
                "write_files:\n",
                "  - path: /home/systemd/system/cfn-hup.service\n",
                "    content: |\n",
                "      # Dummy Content\n",
                "      [Unit]\n",
                "      Description=CloudFormation update trigger daemon\n",
                "      After=cloud-config.service\n",
                "      \n",
                "      [Service]\n",
                "      Type=simple\n",
                "      WorkingDirectory=/usr/bin/\n",
                "      ExecStart=CFN_HUP_PATH\n",
                "    permissions: \"000750\"\n",
                "    owner: root:root\n",
                "\n",
                {
                  "Fn::If": [
                    "CreateAppVolume",
                    {
                      "Fn::Join": [
                        "",
                        [
                          "bootcmd:\n",
                          "- cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                          { "Ref": "AppVolumeDevice" },
                          "\n",
                          "mounts:\n",
                          "- [ ",
                          { "Ref": "AppVolumeDevice" },
                          ", ",
                          { "Ref": "AppVolumeMountPath" },
                          " ]\n"
                        ]
                      ]
                    },
                    { "Ref": "AWS::NoValue" }
                  ]
                },
                "\n",
                "--===============3585321300151562773==\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"script.sh\"\n",
                "\n",
                "#!/bin/bash -xe\n\n",
                "# CFN LaunchConfig Update Toggle: ",
                { "Ref": "ToggleNewInstances" },
                "\n\n",
                "# Export cert bundle ENVs\n",
                "export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                "export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n\n",
                "# Get pip (as needed)\n",
                "if [[ $(which pip > /dev/null 2>&1 )$? -eq 0 ]]\n",
                "then\n",
                "   echo \"Found a pip executable in standard search PATH\"\n",
                "else\n",
                "   curl --silent --show-error --retry 5 -L ",
                    { "Ref": "CfnGetPipUrl" },
                    " | python - --index-url=",
                    { "Ref": "PypiIndexUrl" },
                "   \n\n",
                "   # Add pip to path\n",
                "   hash pip 2> /dev/null ||",
                    " PATH=\"${PATH}:/usr/local/bin\"\n",
                "fi\n",
                "\n\n",
                "# Upgrade pip and setuptools\n",
                "PYPI_URL=",
                { "Ref": "PypiIndexUrl" },
                "\n",
                "pip install",
                " --index-url=\"$PYPI_URL\"",
                " --upgrade pip setuptools\n\n",
                "# Check for cfn-bootstrap components\n",
                "if [[ $(rpm --quiet -q aws-cfn-bootstrap)$? -eq 0 ]]\n",
                "then\n",
                "   echo \"Found CFn utilities via aws-cfn-bootstrap RPM.\"\n",
                "   CFN_HUP_PATH=$(rpm -ql aws-cfn-bootstrap | grep redhat/cfn-hup)\n",
                "else\n",
                "   # Fix python urllib3 warnings\n",
                "   yum -y install gcc python-devel libffi-devel openssl-devel\n",
                "   pip install",
                "    --index-url=\"$PYPI_URL\"",
                "    --upgrade pyopenssl ndg-httpsclient pyasn1\n\n",
                "   # Get cfn utils\n",
                "   pip install",
                "    --index-url=\"$PYPI_URL\"",
                "    --upgrade ",
                { "Ref": "CfnBootstrapUtilsUrl" },
                "   \n\n",
                "   # Remove gcc now that it is no longer needed\n",
                "   yum -y remove gcc --setopt=clean_requirements_on_remove=1\n\n",
                "fi\n",
                "\n\n",
                "# Fixup cfn utils\n",
                "INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat ",
                "2> /dev/null || echo /usr/init/redhat)\n",
                "chmod 775 ${INITDIR}/cfn-hup\n",
                "ln -f -s ${INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup\n",
                "chkconfig --add cfn-hup\n",
                "chkconfig cfn-hup on\n",
                "mkdir -p /opt/aws/bin\n",
                "BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin ",
                "2> /dev/null || echo /usr/bin)\n",
                "for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup ",
                "cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal\n",
                "do\n",
                "  ln -s ${BINDIR}/${SCRIPT} /opt/aws/bin/${SCRIPT} 2> /dev/null || ",
                "  echo Skipped symbolic link, /opt/aws/bin/${SCRIPT} already exists\n",
                "done\n\n",
                "# Add cfn-signal to path\n",
                "hash cfn-signal 2> /dev/null || ",
                "PATH=\"${PATH}:/usr/local/bin:/opt/aws/bin\"",
                "\n\n",
                "# Update cfn-bootstrapper hash method\n",
                "printf 'Updating CFn hash-check method... '\n",
                "PYVERS=$(python -c 'import sys ; ",
                  "version=sys.version_info[:2]; ",
                  "print(\"{0}.{1}\".format(*version))')\n",
                "sed -i '/^[ \\t][ \\t]*self._etag/s/etag$/None/' ",
                  "/usr/lib/python${PYVERS}/site-packages/cfnbootstrap",
                  "/util.py && echo 'Success' || ",
                  "err_exit 'Failed updating CFn hash-method'\n",
                "\n\n",
                "# Execute cfn-init\n",
                "/opt/aws/bin/cfn-init -v -c launch",
                " --stack ",
                { "Ref": "AWS::StackName" },
                " --resource RedMineLC",
                {
                  "Fn::If": [
                    "AssignInstanceRole",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --role ",
                          { "Ref": "InstanceRole" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                " --region ",
                { "Ref": "AWS::Region" },
                " ||",
                " ( echo 'ERROR: cfn-init failed! Aborting!';",
                " /opt/aws/bin/cfn-signal -e 1",
                "  --stack ",
                { "Ref": "AWS::StackName" },
                "  --resource RedMineASG",
                {
                  "Fn::If": [
                    "AssignInstanceRole",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --role ",
                          { "Ref": "InstanceRole" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                {
                  "Fn::If": [
                    "UseCfnUrl",
                    {
                      "Fn::Join": [
                        "",
                        [
                          " --url ",
                          { "Ref": "CfnEndpointUrl" }
                        ]
                      ]
                    },
                    ""
                  ]
                },
                "  --region ",
                { "Ref": "AWS::Region" },
                ";",
                " exit 1",
                " )\n\n",
                "--===============3585321300151562773==--"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    }
  }
}
