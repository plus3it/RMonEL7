{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template coordinates the running of the RedMine Security-group, EFS, RDS, S3 and IAM templates.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Child Template URLs"
          },
          "Parameters": [
            "SgTemplateUri",
            "EfsTemplateUri",
            "RdsTemplateUri",
            "BucketTemplateUri",
            "IamTemplateUri",
            "Ec2TemplateUri"
          ]
        },
        {
          "Label": {
            "default": "Application-Host Parameters"
          },
          "Parameters": [
	    "InstanceType",
            "AmiId",
	    "Hostname",
	    "Domainname",
	    "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "CfnResourceBucket",
            "SubnetId",
	    "NoPublicIp",
	    "PrivateIp",
	    "NoReboot",
	    "NoUpdates",
	    "EpelRepo",
	    "PipRpm",
	    "PyStache",
	    "PipIndexFips",
	    "WatchmakerConfig"
	  ]
        },
        {
          "Label": {
            "default": "Database Parameters"
          },
          "Parameters": [
            "DbInstanceType",
            "InstanceCount",
            "DbDataSize",
            "DbNodeName",
            "DbInstanceName",
            "DbAdminName",
            "DbAdminPass"
          ]
        },
        {
          "Label": {
            "default": "RedMine Setup"
          },
          "Parameters": [
	    "RedMineOsPrepUrl",
	    "RedminePrepScript",
            "RedmineAppinstallScript",
	    "RedMineAppPrepUrl",
	    "RedMineBinaryInstallerUrl",
	    "RedmineHelperLocation",
	    "RedMineProxyFqdn",
	    "RedMineSharePath"
	  ]
        },
        {
          "Label": {
            "default": "Miscellaneous"
          },
          "Parameters": [
            "ServiceTld",
            "TargetVPC",
            "HaSubnets",
            "RolePrefix"
          ]
        }
      ],
      "ParameterLabels": {
        "BucketTemplateUri": {
          "default": "S3 Buckets"
        },
        "EfsTemplateUri": {
          "default": "EFS Shares"
        },
        "IamTemplateUri": {
          "default": "IAM Roles"
        },
        "RdsTemplateUri": {
          "default": "RDS Database"
        },
        "RedMineShareType": {
          "default": "Share Server Type"
        },
        "SgTemplateUri": {
          "default": "Security Groups"
        }
      }
    }
  },
  "Outputs": {},
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$|^s3://.*$",
      "Description": "URL the file containing the admin group's SSH public keys.",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "BucketTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to the child-template for creating the GitLab S3 bucket(s) IAM roles.",
      "Type": "String"
    },
    "CfnResourceBucket": {
      "Description": "Name of authenticated-bucket(s) hosting provisioning resource-files.",
      "Type": "String"
    },
    "DbAdminName": {
      "Description": "Name of the Artifactory master database-user.",
      "Type": "String"
    },
    "DbAdminPass": {
      "Description": "Password of the Artifactory master database-user.",
      "NoEcho": "True",
      "Type": "String"
    },
    "DbDataSize": {
      "ConstraintDescription": "Must be between 5GB and 16384GB.",
      "Default": "5",
      "Description": "Size in GiB of the RDS table-space to create. (UNUSED: present for compatibility-reasons only)",
      "MaxValue": "16384",
      "MinValue": "5",
      "Type": "Number"
    },
    "DbInstanceName": {
      "Description": "Instance-name of the RedMine database.",
      "MaxLength": "8",
      "Type": "String"
    },
    "DbInstanceType": {
      "AllowedValues": [
        "db.t2.small",
        "db.t2.medium",
        "db.r4.large",
        "db.r4.xlarge",
        "db.r4.2xlarge",
        "db.r4.4xlarge",
        "db.r4.8xlarge",
        "db.r4.16xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge"
      ],
      "Default": "db.t2.small",
      "Description": "Amazon RDS instance type",
      "Type": "String"
    },
    "DbNodeName": {
      "Description": "NodeName of the RedMine database.",
      "Type": "String"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for RedMine's hostname and DNS record",
      "Type": "String"
    },
    "Ec2TemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to the child-template for creating the RedMine EC2 instance.",
      "Type": "String"
    },
    "EfsTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to the child-template for creating the GitLab EFS shares.",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "HaSubnets": {
      "Description": "Select three subnets - each from different Availability Zones.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Description": "Node-name for RedMine's hostname and DNS record",
      "Type": "String"
    },
    "IamTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to the child-template for creating the GitLab S3 bucket(s) IAM roles.",
      "Type": "String"
    },
    "InstanceCount": {
      "Default": "2",
      "Description": "Number of cluster-nodes to deploy",
      "MaxValue": "4",
      "MinValue": "1",
      "Type": "Number"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "c4.large",
        "c4.xlarge",
        "m4.large",
        "m4.xlarge"
      ],
      "Default": "t2.micro",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "NoUpdates": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, Watchmaker _always_ installs updates)",
      "Type": "String"
    },
    "PipIndexFips": {
      "AllowedPattern": "^http[s]?://.*$",
      "Default": "https://pypi.org/simple",
      "Description": "URL to the PyPi Index",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "PrivateIp": {
      "Default": "",
      "Description": "(Optional) Set a static, primary private IP. Leave blank to auto-select a free IP",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "confbuilder",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "RdsTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to the child-template for creating the GitLab RDS database.",
      "Type": "String"
    },
    "RedMineAppPrepUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that installs RedMine to the EC2 instance.",
      "Type": "String"
    },
    "RedMineBinaryInstallerUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to RedMine installer-bin.",
      "Type": "String"
    },
    "RedMineOsPrepUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to script that prepares the EC2 instance for a RedMine install.",
      "Type": "String"
    },
    "RedMineProxyFqdn": {
      "Description": "Fully-qualified domainname of the RedMine reverse-proxy host.",
      "Type": "String"
    },
    "RedMineSharePath": {
      "Default": "",
      "Description": "Share-path of shared RedMine content.",
      "Type": "String"
    },
    "RedmineAppinstallScript": {
      "AllowedPattern": "^http://.*\\.sh$|^https://.*\\.sh$|^s3://.*\\.sh$",
      "Description": "URL of the script that installs/configures RedMine",
      "Type": "String"
    },
    "RedmineHelperLocation": {
      "AllowedPattern": "^http://.*$|^https://.*$|^s3://.*$",
      "Description": "URL-root of location hosting ancilllary install files.",
      "Type": "String"
    },
    "RedminePrepScript": {
      "AllowedPattern": "^http://.*\\.sh$|^https://.*\\.sh$|^s3://.*\\.sh$",
      "Description": "URL of the script that preps the OS to host RedMine",
      "Type": "String"
    },
    "RolePrefix": {
      "Description": "Prefix to apply to IAM role to make things a bit prettier (optional).",
      "Type": "String"
    },
    "ServiceTld": {
      "Default": "amazonaws.com",
      "Description": "TLD of the IAMable service-name.",
      "Type": "String"
    },
    "SgTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL to the child-template for creating the GitLab security-groups.",
      "Type": "String"
    },
    "SubnetId": {
      "Description": "ID of the subnet to assign to the instance",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "TargetVPC": {
      "AllowedPattern": "^vpc-[0-9a-f]*$",
      "Description": "ID of the VPC to deploy RedMine components into.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "WatchmakerConfig": {
      "AllowedPattern": "^$|^http[s]?://.*$",
      "Default": "",
      "Description": "(Optional) URL to a Watchmaker config file",
      "Type": "String"
    }
  },
  "Resources": {
    "Ec2Res": {
      "Properties": {
        "Parameters": {
          "AdminPubkeyURL": { "Ref": "AdminPubkeyURL" },
          "AmiDistro": "CentOS",
          "AmiId": { "Ref": "AmiId" },
          "AppVolumeDevice": "",
          "CfnEndpointUrl": {
            "Fn::Join": [
              ".",
              [
                "https://cloudformation",
                { "Ref": "AWS::Region" },
                { "Ref": "ServiceTld" }
              ]
            ]
          },
          "CfnResourceBucket": { "Ref": "CfnResourceBucket" },
          "DbAdminName": { "Ref": "DbAdminName" },
          "DbAdminPass": { "Ref": "DbAdminPass" },
          "DbFqdn": {
            "Fn::GetAtt": [ "RdsRes", "Outputs.RdsEndpointAddress" ]
          },
          "DbInstanceName": { "Ref": "DbInstanceName" },
          "Domainname": { "Ref": "Domainname" },
          "EpelRepo": { "Ref": "EpelRepo" },
          "Hostname": { "Ref": "Hostname" },
          "InstanceRole": {
            "Fn::GetAtt": [ "IamRes", "Outputs.InstanceRoleProfile" ]
          },
          "InstanceType": { "Ref": "InstanceType" },
          "KeyPairName": { "Ref": "KeyPairName" },
          "NoPublicIp": { "Ref": "NoPublicIp" },
          "NoReboot": { "Ref": "NoReboot" },
          "NoUpdates": { "Ref": "NoUpdates" },
          "PipIndexFips": { "Ref": "PipIndexFips" },
          "PipRpm": { "Ref": "PipRpm" },
          "PrivateIp": { "Ref": "PrivateIp" },
          "ProvisionUser": { "Ref": "ProvisionUser" },
          "PyStache": { "Ref": "PyStache" },
          "RedMineAppPrepUrl": { "Ref": "RedMineAppPrepUrl" },
          "RedMineBinaryInstallerUrl": { "Ref": "RedMineBinaryInstallerUrl" },
          "RedMineOsPrepUrl": { "Ref": "RedMineOsPrepUrl" },
          "RedMineProxyFqdn": { "Ref": "RedMineProxyFqdn" },
          "RedMineSharePath": { "Ref": "RedMineSharePath" },
          "RedMineShareType": "nfs",
	  "RedmineAppinstallScript": { "Ref": "RedmineAppinstallScript" },
	  "RedminePrepScript": { "Ref": "RedminePrepScript" },
	  "RedmineHelperLocation": { "Ref": "RedmineHelperLocation" },
          "SecurityGroupIds": {
            "Fn::Join": [
              ",",
              [
                { "Fn::GetAtt": [ "SgRes", "Outputs.AppSg" ] },
                { "Fn::GetAtt": [ "SgRes", "Outputs.NasSg" ] },
                { "Fn::GetAtt": [ "SgRes", "Outputs.RdsSg" ] }
              ]
            ]
          },
          "SubnetId": { "Ref": "SubnetId" },
          "WatchmakerConfig": { "Ref": "WatchmakerConfig" },
          "WatchmakerEnvironment": "dev"
        },
        "TemplateURL": {
          "Ref": "Ec2TemplateUri"
        }
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "EfsRes": {
      "Properties": {
        "Parameters": {
          "EfsSg": {
            "Fn::GetAtt": [
              "SgRes",
              "Outputs.NasSg"
            ]
          },
          "EfsSubnet": {
            "Fn::Join": [
              ",",
              {
                "Ref": "HaSubnets"
              }
            ]
          },
          "ServiceTld": {
            "Ref": "ServiceTld"
          }
        },
        "TemplateURL": {
          "Ref": "EfsTemplateUri"
        }
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "IamRes": {
      "Properties": {
        "Parameters": {
          "BackupBucketArn": {
            "Fn::GetAtt": [
              "S3Res",
              "Outputs.BucketArn"
            ]
          },
          "RolePrefix": {
            "Ref": "RolePrefix"
          },
          "ServiceTld": {
            "Ref": "ServiceTld"
          }
        },
        "TemplateURL": {
          "Ref": "IamTemplateUri"
        },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "RdsRes": {
      "Properties": {
        "Parameters": {
          "DbAdminName": {
            "Ref": "DbAdminName"
          },
          "DbAdminPass": {
            "Ref": "DbAdminPass"
          },
          "DbDataSize": {
            "Ref": "DbDataSize"
          },
          "DbInstanceName": {
            "Ref": "DbInstanceName"
          },
          "DbInstanceType": {
            "Ref": "DbInstanceType"
          },
          "DbIsMultiAz": "true",
          "DbNodeName": {
            "Ref": "DbNodeName"
          },
          "DbSecurityGroup": {
            "Fn::GetAtt": [
              "SgRes",
              "Outputs.RdsSg"
            ]
          },
          "DbSubnets": {
            "Fn::Join": [
              ",",
              {
                "Ref": "HaSubnets"
              }
            ]
          },
          "InstanceCount": {
            "Ref": "InstanceCount"
          },
          "TargetVPC": {
            "Ref": "TargetVPC"
          }
        },
        "TemplateURL": {
          "Ref": "RdsTemplateUri"
        }
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "S3Res": {
      "Properties": {
        "TemplateURL": {
          "Ref": "BucketTemplateUri"
        },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "SgRes": {
      "Properties": {
        "Parameters": {
          "TargetVPC": {
            "Ref": "TargetVPC"
          }
        },
        "TemplateURL": {
          "Ref": "SgTemplateUri"
        },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    }
  }
}
